#!/usr/bin/env sh

# ##################################################### #
# See the hotkey explanation at the bottom of file	#
# to understand definitions				#
# ##################################################### #

## fullscreen current window
yabai -m window --grid 1:1:0:0:1:1

## Center current window
ctrl + alt - c : yabai -m query --displays --display | grep -o '"w":[0-9]*' | cut -d':' -f2 | read display_width && \
                 yabai -m query --displays --display | grep -o '"h":[0-9]*' | cut -d':' -f2 | read display_height && \
                 yabai -m query --windows --window | grep -o '"w":[0-9]*' | cut -d':' -f2 | read window_width && \
                 yabai -m query --windows --window | grep -o '"h":[0-9]*' | cut -d':' -f2 | read window_height && \
                 new_x=$(( (display_width - window_width) / 2 )) && \
                 new_y=$(( (display_height - window_height) / 2 )) && \
                 yabai -m window --move abs:$new_x:$new_y

# display_width=$(echo $display_info | grep -o '"w":[0-9]*' | cut -d':' -f2)
# display_height=$(echo $display_info | grep -o '"h":[0-9]*' | cut -d':' -f2)
# 
# window_info=$(yabai -m query --windows --window)
# window_width=$(echo $window_info | grep -o '"w":[0-9]*' | cut -d':' -f2)
# window_height=$(echo $window_info | grep -o '"h":[0-9]*' | cut -d':' -f2)
# 
# new_x=$(( (display_width - window_width) / 2 ))
# new_y=$(( (display_height - window_height) / 2 ))
# 
# yabai -m window --move abs:$new_x:$new_y

## halves
### left half
yabai -m window --grid 1:2:0:0:1:1
### right half
yabai -m window --grid 1:2:1:0:1:1

## thirds
### left third
yabai -m window --grid 1:3:0:0:1:1
### middle third
yabai -m window --grid 1:3:1:0:1:1
### right third
yabai -m window --grid 1:3:2:0:1:1

## quarters
### top-left
yabai -m window --grid 2:2:0:0:1:1
### top-right
yabai -m window --grid 2:2:1:0:1:1
### bottom-left
yabai -m window --grid 2:2:0:1:1:1
### bottom-right
yabai -m window --grid 2:2:1:1:1:1

# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.
